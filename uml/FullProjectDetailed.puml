@startuml
' =========================
' PAQUETES/NAMESPACES
' =========================

package "Core.Stats" {
    class BaseStatHolder {
        - healthComponent : HealthComponent
        - manaComponent : ManaComponent
        + GetHealthComponent() : HealthComponent
        + GetManaComponent() : ManaComponent
        ' Clase base para portadores de estadísticas (vida/maná)
    }
}

package "Core.Player" {
    class PlayableStatHolder {
        - abilities : List<AbilityBase> <<list>>
        # AbilitySystem : SystemAbility
        + UseAbility(index: int) : void
        + RobustInitialize() : void
        + Health { get }
        + Mana { get }
        ' Hereda de BaseStatHolder. Portador jugable con habilidades.
    }
    class NonPlayableStatHolder {
        + OnDeath : Action <<event>>
        + CheckDeath() : void
        + Health { get }
        ' Hereda de BaseStatHolder. Portador no jugable.
    }
}

package "Core.Agents" {
    class ManaKnight {
        - statHolder : PlayableStatHolder
        + UseMana(amount: int) : void
        + GetCurrentMana() : int
        + GetMaxMana() : int
        + Mana { get }
        ' Portador que consume maná para habilidades.
    }
    class SoulMage {
        - statHolder : PlayableStatHolder
        + UseHealth(amount: int) : void
        + RecoverHealth(amount: int) : void
        + GetCurrentHealth() : int
        + GetMaxHealth() : int
        + Health { get }
        ' Portador que consume vida para habilidades.
    }
}

package "Core.Components" {
    class HealthComponent {
        - value : int
        - maxValue : int
        + AffectValue(amount: int) : void
        + OnValueChanged : event <<event>>
        + GetValue() : int
        + GetMaxValue() : int
        + CurrentValue { get }
        + MaxValue { get }
        {static} + GLOBAL_MAX : int
        ' Componente serializable para vida.
    }
    class ManaComponent {
        - value : int
        - maxValue : int
        - flowSpeed : uint
        - condition : ManaCondition
        + AffectValue(amount: int, condition: ManaCondition) : void
        + OnValueChanged : event <<event>>
        + GetValue() : int
        + GetMaxValue() : int
        + GetCondition() : ManaCondition
        + CurrentValue { get }
        + MaxValue { get }
        + Condition { get }
        {static} + GLOBAL_MAX : int
        ' Componente serializable para maná.
    }
}

enum ManaCondition {
    None
    ByTime
    Instant
}

' =========================
' INTERFACES Y HABILIDADES
' =========================

interface IAbility {
    + Use(holder: BaseStatHolder) : void
    + CanUse(holder: BaseStatHolder) : bool
}

package "Core.Abilities" {
    class AbilityBase implements IAbility {
        - cooldown : float
        + Use(holder: BaseStatHolder) : void
        + CanUse(holder: BaseStatHolder) : bool
        + ResourceCost { get }
        ' Clase base para habilidades.
    }
    class ProjectileAbility extends AbilityBase {
        + Use(holder: BaseStatHolder) : void
        ' Habilidad de proyectil, consume recurso según portador (maná o vida).
    }
    class AreaDamageAbility extends AbilityBase {
        + Use(holder: BaseStatHolder) : void
        ' Habilidad de daño en área (consume maná).
    }
    class HealAbility extends AbilityBase {
        + Use(holder: BaseStatHolder) : void
        ' Habilidad de curación (consume vida).
    }
    class SystemAbility {
        + CanUse(holder: BaseStatHolder) : bool
        + GetSelectedAbility() : AbilityBase
        + UseSelectedAbility(holder: BaseStatHolder) : void
        + AllAbilities : List<AbilityBase> <<list>>
        ' Sistema de control de uso de habilidades.
    }
}

package "Core.Areas" {
    class ManaArea {
        + OnTriggerEnter(holder: BaseStatHolder) : void
        ' Área que recupera maná.
    }
    class HealthArea {
        + OnTriggerEnter(holder: BaseStatHolder) : void
        ' Área que recupera vida.
    }
}

' =========================
' HERENCIAS E IMPLEMENTACIONES
' =========================

Core.Player.PlayableStatHolder --|> Core.Stats.BaseStatHolder : Herencia
Core.Player.NonPlayableStatHolder --|> Core.Stats.BaseStatHolder : Herencia
Core.Abilities.AbilityBase ..|> IAbility : Implementa
Core.Abilities.ProjectileAbility --|> Core.Abilities.AbilityBase : Herencia
Core.Abilities.AreaDamageAbility --|> Core.Abilities.AbilityBase : Herencia
Core.Abilities.HealAbility --|> Core.Abilities.AbilityBase : Herencia

' =========================
' ASOCIACIONES Y DEPENDENCIAS
' =========================

Core.Stats.BaseStatHolder *-- "1" Core.Components.HealthComponent : "Composición\nEncapsulado, acceso controlado"
Core.Stats.BaseStatHolder *-- "1" Core.Components.ManaComponent : "Composición\nEncapsulado, acceso controlado"
Core.Player.PlayableStatHolder o-- "*" Core.Abilities.AbilityBase : "Agregación\nHabilidades polimórficas"
Core.Agents.ManaKnight *-- "1" Core.Player.PlayableStatHolder : "Composición\nPortador jugable"
Core.Agents.SoulMage *-- "1" Core.Player.PlayableStatHolder : "Composición\nPortador jugable"
Core.Abilities.AbilityBase ..> Core.Stats.BaseStatHolder : "Dependencia\nUsa recursos del portador"
Core.Areas.ManaArea ..> Core.Stats.BaseStatHolder : "Dependencia\nRecupera maná"
Core.Areas.HealthArea ..> Core.Stats.BaseStatHolder : "Dependencia\nRecupera vida"
Core.Abilities.SystemAbility ..> Core.Stats.BaseStatHolder : "Dependencia\nVerifica si puede usar habilidad"

' =========================
' RELACIONES DE USO DE EVENTOS
' =========================

Core.Player.NonPlayableStatHolder ..> Core.Player.NonPlayableStatHolder::OnDeath : "Suscripción a evento de muerte"

' =========================
' NOTAS Y ACLARACIONES
' =========================

note right of Core.Components.ManaComponent
  - El campo 'condition' controla el modo de afectación del maná.
  - El método AffectValue puede ser instantáneo o por tiempo.
  - No se exponen setters públicos para recursos críticos.
end note

note right of Core.Player.PlayableStatHolder
  - RobustInitialize asegura referencias correctas y seguras.
  - No expone setters públicos para campos sensibles.
  - El acceso a habilidades es solo lectura externa.
end note

note right of Core.Abilities.AbilityBase
  - Las habilidades usan polimorfismo para consumir vida o maná
    según el tipo de portador (ManaKnight o SoulMage).
  - HealAbility consume vida, AreaDamageAbility y ProjectileAbility consumen maná.
  - El sistema es extensible para nuevas habilidades.
end note

note right of Core.Player.NonPlayableStatHolder
  - Los NPCs pueden suscribirse a eventos de muerte (OnDeath) para lógica de IA o efectos.
  - Se recomienda manejar la lógica de muerte mediante eventos para desacoplar sistemas.
end note

note as N1
  - Todas las colecciones se representan con <<list>>.
  - Los métodos de acceso (getters) se muestran como propiedades { get }.
  - Las composiciones se muestran con *-- y las agregaciones con o--.
  - El diagrama está organizado en paquetes para reflejar la estructura del proyecto.
end note

@enduml