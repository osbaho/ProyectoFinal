@startuml

' === RELATIONSHIP LEGEND ===
' <|--  : Herencia (Inheritance)
' ..|>  : Implementa interfaz (Implements interface)
' --    : Asociación (Association)
' *--   : Composición (Composition)
' ..>   : Asociación débil (Weak association / usage)
' "1"   : Uno
' "0..*" o "*" : Muchos
' "1..3": Entre uno y tres

' ENUMS
package "Enums" {
    enum ManaCondition {
        ByTime
        ByInteraction
    }
}

' INTERFACES
package "Interfaces" {
    interface IHealth {
        +TakeDamage(amount : int) : void
        +Heal(amount : int) : void
    }

    interface IResourceUser {
        +UseResource(amount : int) : void
        +RecoverResource(amount : int) : void
        +GetCurrentResource() : int
        +GetMaxResource() : int
    }
}

' BASE COMPONENTS
package "Base" {
    abstract class StatComponent {
        -maxValue : int
        -currentValue : int
        +MaxValue : int
        +CurrentValue : int
        +OnValueChanged : Action<int, int>
        +SetValue(value : int) : void
    }

    abstract class BaseStatHolder {
        +Initialize(components : StatComponent[]) : void
        +AddStat(stat : StatComponent) : void
        +RemoveStat(stat : StatComponent) : void
        +GetStat<T>() : T
    }

    abstract class ResourceUserAgent {
        +UseResource(amount : int) : void
        +RecoverResource(amount : int) : void
        +GetCurrentResource() : int
        +GetMaxResource() : int
        #CurrentResource : int
        #MaxResource : int
        #ConsumeResource(amount : int) : void
        #Recover(amount : int) : void
    }
}

package "Components" {
    class HealthComponent {
        +MaxHealth : int
        +CurrentHealth : int
        +OnHealthChanged : Action<int, int>
        +TakeDamage(amount : int) : void
        +Heal(amount : int) : void
        +SetHealth(value : int) : void
    }

    class ManaComponent {
        +MaxMana : int
        +CurrentMana : int
        +Condition : ManaCondition
        +OnManaChanged : Action<int, int>
        +UseResource(amount : int) : void
        +RecoverResource(amount : int) : void
        +SetMana(value : int) : void
        +GetCurrentResource() : int
        +GetMaxResource() : int
        +UpdateByCondition(deltaTime : float) : void
    }
}

package "Player.Holders" {
    class PlayableStatHolder {
        +Health : HealthComponent
        +Mana : ManaComponent
        +AbilitySystem : SystemAbility
        +AddAbility(ability : AbilityBase) : void
        +RemoveAbility(ability : AbilityBase) : void
        +UseAbility(index : int) : void
        +TakeDamage(amount : int) : void
        +InitializeAbilities(healIcon, areaIcon, projectileIcon, projectilePrefab) : void
    }
}

package "Agentes.NPC" {
    class NonPlayableStatHolder {
        +Health : HealthComponent
        +OnDeath : Action
    }
}

package "Agentes" {
    class SoulMage {
        #CurrentResource : int
        #MaxResource : int
        #ConsumeResource(amount : int) : void
        #Recover(amount : int) : void
    }

    class ManaKnight {
        #CurrentResource : int
        #MaxResource : int
        #ConsumeResource(amount : int) : void
        #Recover(amount : int) : void
    }
}

package "Abilities.Base" {
    abstract class AbilityBase {
        +Name : string
        +Icon : Sprite
        +Cooldown : float
        +ResourceCost : int
        +CanUse(user : PlayableStatHolder) : bool
        +Use(user : PlayableStatHolder) : void
        +OnAbilityEffect(user : PlayableStatHolder) : void
    }
}

package "Abilities.Habilities" {
    class HealAbility {
        +HealAbility(name : string, icon : Sprite, resourceCost : int = 0)
        +CanUse(user : PlayableStatHolder) : bool
        +OnAbilityEffect(user : PlayableStatHolder) : void
    }

    class AreaDamageAbility {
        +AreaDamageAbility(name : string, icon : Sprite, radius : float = 5f, damage : int = 30, resourceCost : int = 0)
        +CanUse(user : PlayableStatHolder) : bool
        +OnAbilityEffect(user : PlayableStatHolder) : void
    }

    class ProjectileAbility {
        +ProjectileAbility(name : string, icon : Sprite, projectilePrefab : GameObject = null, projectileSpeed : float = 20f, resourceCost : int = 0)
        +CanUse(user : PlayableStatHolder) : bool
        +OnAbilityEffect(user : PlayableStatHolder) : void
    }
}

package "Abilities.System" {
    class SystemAbility {
        +AllAbilities : List<AbilityBase>
        +SelectedAbilityIndex : int
        +GetAbilityByName(name : string) : AbilityBase
        +AddAbility(ability : AbilityBase) : void
        +RemoveAbility(ability : AbilityBase) : void
        +GetSelectedAbility() : AbilityBase
        +UseSelectedAbility(user : PlayableStatHolder) : void
    }
}

package "Areas.Recovery" {
    class ResourceArea {
        +resourceAmount : int
        +OnTriggerEnter(other : Collider) : void
    }
}

package "Areas.Damage" {
    class ProjectileDamage {
        -damage : int
        +SetDamage(dmg : int) : void
        +OnTriggerEnter(other : Collider) : void
    }

    class AreaDamage {
        +damage : int
        +damageInterval : float
        +SetDamage(dmg : int) : void
        +OnTriggerEnter(other : Collider) : void
        +OnTriggerExit(other : Collider) : void
        +Update() : void
    }
}

' === RELATIONS WITH EXPLANATION ===

' Herencia
Base.StatComponent <|-- Components.HealthComponent : "Herencia"
Base.StatComponent <|-- Components.ManaComponent : "Herencia"
Base.BaseStatHolder <|-- Player.Holders.PlayableStatHolder : "Herencia"
Base.BaseStatHolder <|-- Agentes.NPC.NonPlayableStatHolder : "Herencia"
Base.ResourceUserAgent <|-- Agentes.SoulMage : "Herencia"
Base.ResourceUserAgent <|-- Agentes.ManaKnight : "Herencia"
Abilities.Base.AbilityBase <|-- Abilities.Habilities.HealAbility : "Herencia"
Abilities.Base.AbilityBase <|-- Abilities.Habilities.AreaDamageAbility : "Herencia"
Abilities.Base.AbilityBase <|-- Abilities.Habilities.ProjectileAbility : "Herencia"

' Implementación de interfaz
Components.HealthComponent ..|> Interfaces.IHealth : "Implementa"
Components.ManaComponent ..|> Interfaces.IResourceUser : "Implementa"
Base.ResourceUserAgent ..|> Interfaces.IResourceUser : "Implementa"

' Asociación
Player.Holders.PlayableStatHolder -- Abilities.System.SystemAbility : "AbilitySystem"
Player.Holders.PlayableStatHolder -- Components.HealthComponent : "Health"
Player.Holders.PlayableStatHolder -- Components.ManaComponent : "Mana"
Agentes.NPC.NonPlayableStatHolder -- Components.HealthComponent : "Health"
Components.ManaComponent -- Enums.ManaCondition : "Condition"

' Composición: SystemAbility contiene de 1 a 3 habilidades
Abilities.System.SystemAbility "1" *-- "1..3" Abilities.Base.AbilityBase : "AllAbilities"

' Asociación débil / uso
Areas.Recovery.ResourceArea ..> Interfaces.IResourceUser : "OnTriggerEnter"
Areas.Damage.ProjectileDamage ..> Interfaces.IHealth : "OnTriggerEnter"
Areas.Damage.AreaDamage ..> Interfaces.IHealth : "OnTriggerEnter/Exit/Update"

@enduml