@startuml

' ENUMS
enum ManaCondition {
    None
    ByTime
    ByInteraction
    ByAbility
}

' INTERFACES
namespace Interfaces {
    interface IHealth {
        +TakeDamage(amount : int) : void
        +Heal(amount : int) : void
    }

    interface IResourceUser {
        +UseResource(amount : int) : void
        +RecoverResource(amount : int) : void
        +GetCurrentResource() : int
        +GetMaxResource() : int
    }

    interface IAbilityUser {
        +Abilities : IReadOnlyList<AbilityBase>
        +AddAbility(ability : AbilityBase) : void
        +RemoveAbility(ability : AbilityBase) : void
        +UseAbility(index : int) : void
    }
}

' BASE COMPONENTS
abstract class StatComponent {
    -maxValue : int
    -currentValue : int
    +MaxValue : int
    +CurrentValue : int
    +OnValueChanged : Action<int, int>
    +SetValue(value : int) : void
}

class HealthComponent {
    +MaxHealth : int
    +CurrentHealth : int
    +OnHealthChanged : Action<int, int>
    +TakeDamage(amount : int) : void
    +Heal(amount : int) : void
    +SetHealth(value : int) : void
}

class ManaComponent {
    +MaxMana : int
    +CurrentMana : int
    +Condition : ManaCondition
    +OnManaChanged : Action<int, int>
    +UseResource(amount : int) : void
    +RecoverResource(amount : int) : void
    +SetMana(value : int) : void
    +GetCurrentResource() : int
    +GetMaxResource() : int
    +UpdateByCondition(deltaTime : float) : void
}

' STAT HOLDERS
abstract class BaseStatHolder {
    +Health : HealthComponent
    +AddHealth(health : HealthComponent) : void
    +RemoveHealth() : void
    +GetHealth() : HealthComponent
    +Mana : ManaComponent
    +AddMana(mana : ManaComponent) : void
    +RemoveMana() : void
    +GetMana() : ManaComponent
}

class PlayableStatHolder {
    +Health : HealthComponent
    +Mana : ManaComponent
    +AbilitySystem : SystemAbility
    +AddAbility(ability : AbilityBase) : void
    +RemoveAbility(ability : AbilityBase) : void
    +UseAbility(index : int) : void
    +TakeDamage(amount : int) : void
}

class NonPlayableStatHolder {
    +Health : HealthComponent
    +OnDeath : Action
}

class SoulMage {
    +UseResource(amount : int) : void
    +RecoverResource(amount : int) : void
    +GetCurrentResource() : int
    +GetMaxResource() : int
}

class ManaKnight {
    +UseResource(amount : int) : void
    +RecoverResource(amount : int) : void
    +GetCurrentResource() : int
    +GetMaxResource() : int
}

' ABILITIES
abstract class AbilityBase {
    +Name : string
    +Icon : Sprite
    +Cooldown : float
    +ResourceCost : int
    +CanUse(user : PlayableStatHolder) : bool
    +Use(user : PlayableStatHolder) : void
    +OnAbilityEffect(user : PlayableStatHolder) : void
}

class HealAbility {
    +HealAbility(name : string, icon : Sprite)
    +CanUse(user : PlayableStatHolder) : bool
    +Use(user : PlayableStatHolder) : void
    +OnAbilityEffect(user : PlayableStatHolder) : void
}

class AreaDamageAbility {
    +AreaDamageAbility(name : string, icon : Sprite, radius : float = 5f, damage : int = 30)
    +CanUse(user : PlayableStatHolder) : bool
    +OnAbilityEffect(user : PlayableStatHolder) : void
}

class ProjectileAbility {
    +ProjectileAbility(name : string, icon : Sprite, projectilePrefab : GameObject = null, projectileSpeed : float = 20f)
    +CanUse(user : PlayableStatHolder) : bool
    +OnAbilityEffect(user : PlayableStatHolder) : void
}

class SystemAbility {
    +AllAbilities : List<AbilityBase>
    +SelectedAbilityIndex : int
    +GetAbilityByName(name : string) : AbilityBase
    +AddAbility(ability : AbilityBase) : void
    +RemoveAbility(ability : AbilityBase) : void
    +GetSelectedAbility() : AbilityBase
    +UseSelectedAbility(user : PlayableStatHolder) : void
}

' UTILITY/OTHER
class ResourceArea {
    +resourceAmount : int
    +OnTriggerEnter(other : Collider) : void
}

class ProjectileDamage {
    -damage : int
    +SetDamage(dmg : int) : void
    +OnTriggerEnter(other : Collider) : void
}

class AreaDamage {
    +damage : int
    +damageInterval : float
    +SetDamage(dmg : int) : void
    +OnTriggerEnter(other : Collider) : void
    +OnTriggerExit(other : Collider) : void
    +Update() : void
}

' RELATIONS

StatComponent <|-- HealthComponent : <<herencia>>
StatComponent <|-- ManaComponent : <<herencia>>
BaseStatHolder <|-- PlayableStatHolder : <<herencia>>
BaseStatHolder <|-- NonPlayableStatHolder : <<herencia>>

HealthComponent ..|> Interfaces.IHealth : <<implementa>>
ManaComponent ..|> Interfaces.IResourceUser : <<implementa>>
SoulMage ..|> Interfaces.IResourceUser : <<implementa>>
ManaKnight ..|> Interfaces.IResourceUser : <<implementa>>

AbilityBase <|-- HealAbility : <<herencia>>
AbilityBase <|-- AreaDamageAbility : <<herencia>>
AbilityBase <|-- ProjectileAbility : <<herencia>>

PlayableStatHolder -- SystemAbility : "AbilitySystem (asociación)"
SystemAbility *-- AbilityBase : "AllAbilities (composición)"
PlayableStatHolder -- HealthComponent : "Health (asociación)"
PlayableStatHolder -- ManaComponent : "Mana (asociación)"
NonPlayableStatHolder -- HealthComponent : "Health (asociación)"
ManaComponent -- ManaCondition : "Condition (asociación)"

ResourceArea ..> Interfaces.IResourceUser : "OnTriggerEnter (asociación débil)"
ProjectileDamage ..> Interfaces.IHealth : "OnTriggerEnter (asociación débil)"
AreaDamage ..> Interfaces.IHealth : "OnTriggerEnter/Exit/Update (asociación débil)"

@enduml